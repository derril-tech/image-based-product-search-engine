name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Lint and test shared package
  shared:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./packages/shared

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: packages/shared/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Test
        run: npm test

  # Frontend CI
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: apps/frontend/.next

  # Gateway CI
  gateway:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/gateway

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/gateway/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Test
        run: npm test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gateway-build
          path: apps/gateway/dist

  # Workers CI
  workers:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/workers

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('apps/workers/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Format check with black
        run: black --check src tests

      - name: Import sorting check with isort
        run: isort --check-only src tests

      - name: Test with pytest
        run: |
          pytest --cov=src --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/workers/coverage.xml
          flags: workers
          name: workers-coverage

  # Docker Build
  docker-build:
    needs: [shared, frontend, gateway, workers]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: apps/frontend/.next

      - name: Download gateway build
        uses: actions/download-artifact@v4
        with:
          name: gateway-build
          path: apps/gateway/dist

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./apps/frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/image-search-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push gateway
        uses: docker/build-push-action@v5
        with:
          context: ./apps/gateway
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/image-search-gateway:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push workers
        uses: docker/build-push-action@v5
        with:
          context: ./apps/workers
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/image-search-workers:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scan
  security:
    runs-on: ubuntu-latest
    needs: [shared, frontend, gateway, workers]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
