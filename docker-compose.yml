version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: image-search-postgres
    environment:
      POSTGRES_DB: image_search
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: image-search-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # NATS
  nats:
    image: nats:2-alpine
    container_name: image-search-nats
    ports:
      - "4222:4222"
      - "8222:8222"
    command: -js -m 8222
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8222/healthz" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Milvus
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: image-search-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd

  milvus:
    image: milvusdb/milvus:v2.3.4
    container_name: image-search-milvus
    command: [ "milvus", "run", "standalone" ]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - etcd
      - minio
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9091/healthz" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: image-search-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  gateway:
    build:
      context: ./apps/gateway
      dockerfile: Dockerfile
    container_name: image-search-gateway
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_NAME: image_search
      REDIS_URL: redis://redis:6379
      FRONTEND_URL: http://localhost:3000
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/gateway:/app
      - /app/node_modules

  # Frontend
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    container_name: image-search-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - gateway
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
      - /app/.next

  # Workers
  workers:
    build:
      context: ./apps/workers
      dockerfile: Dockerfile
    container_name: image-search-workers
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/image_search
      REDIS_URL: redis://redis:6379
      NATS_URL: nats://nats:4222
      MILVUS_HOST: milvus
      MILVUS_PORT: 19530
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET: image-search
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      milvus:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./apps/workers:/app
      - model_cache:/root/.cache

volumes:
  postgres_data:
  redis_data:
  etcd_data:
  milvus_data:
  minio_data:
  model_cache:
